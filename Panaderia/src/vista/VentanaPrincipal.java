/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import javax.swing.JOptionPane;
import modelo.Producto;
import modelo.ProductoDAO;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author wixo
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        cargarProductos();
    }
    




private void cargarProductos() {
    DefaultTableModel modeloTabla = (DefaultTableModel) tablaProductos.getModel();
    modeloTabla.setRowCount(0); // Limpiar la tabla antes de cargar

    ProductoDAO dao = new ProductoDAO();
    for (Producto p : dao.listarProductos()) {
        modeloTabla.addRow(new Object[]{p.getIdProducto(), p.getNombreProducto(), p.getPrecioUnitario()});
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Clientes"); // NOI18N

        btnAgregar.setBackground(new java.awt.Color(255, 153, 51));
        btnAgregar.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(102, 51, 0));
        btnAgregar.setText("Agregar Producto");
        btnAgregar.setBorder(new javax.swing.border.MatteBorder(null));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jScrollPane1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        tablaProductos.setBackground(new java.awt.Color(255, 204, 102));
        tablaProductos.setBorder(new javax.swing.border.MatteBorder(null));
        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre del Producto", "Precio Unitario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaProductos.setName("tablaProductos"); // NOI18N
        jScrollPane1.setViewportView(tablaProductos);

        btnActualizar.setBackground(new java.awt.Color(255, 153, 51));
        btnActualizar.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(102, 51, 0));
        btnActualizar.setText("Actualizar Precio");
        btnActualizar.setBorder(new javax.swing.border.MatteBorder(null));
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(255, 153, 51));
        btnEliminar.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(102, 51, 0));
        btnEliminar.setText("Eliminar Producto");
        btnEliminar.setBorder(new javax.swing.border.MatteBorder(null));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAtras.setBackground(new java.awt.Color(255, 153, 51));
        btnAtras.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(102, 51, 0));
        btnAtras.setText("Atras");
        btnAtras.setBorder(new javax.swing.border.MatteBorder(null));
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jScrollPane1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1AncestorAdded

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
    // Solicitar el nombre del producto
    String nombreProducto = JOptionPane.showInputDialog(null, "Ingrese el nombre del producto:");
    if (nombreProducto == null || nombreProducto.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Debe ingresar un nombre para el producto.");
        return; // Salir si el nombre no es válido
    }

    // Solicitar el precio del producto
    String precioStr = JOptionPane.showInputDialog(null, "Ingrese el precio del producto:");
    if (precioStr == null || precioStr.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Debe ingresar un precio para el producto.");
        return; // Salir si el precio no es válido
    }

    try {
        // Convertir el precio a Double
        double precioProducto = Double.parseDouble(precioStr.trim());
        if (precioProducto <= 0) {
            JOptionPane.showMessageDialog(null, "El precio debe ser mayor a 0.");
            return; // Salir si el precio no es válido
        }

        // Crear un objeto Producto
        Producto producto = new Producto(0, nombreProducto, precioProducto);

        // Insertar el producto en la base de datos
        ProductoDAO dao = new ProductoDAO();
        if (dao.agregarProducto(producto)) { // Método en ProductoDAO
            JOptionPane.showMessageDialog(null, "Producto agregado con éxito.");
            cargarProductos(); // Refrescar la tabla
        } else {
            JOptionPane.showMessageDialog(null, "Error al agregar el producto. Verifique los datos.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El precio debe ser un número válido.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Ocurrió un error inesperado: " + e.getMessage());
    }

    // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // Este bloque de código permite actualizar el precio de un producto seleccionado en la tabla.

if (tablaProductos.getRowCount() == 0) { 
    // Verifica si no hay productos en la tabla.
    JOptionPane.showMessageDialog(null, "No hay productos en la tabla para actualizar."); 
    // Muestra un mensaje indicando que no hay productos disponibles para actualizar.
    return; 
    // Sale del método si la tabla está vacía.
}

int filaSeleccionada = tablaProductos.getSelectedRow(); 
// Obtiene la fila seleccionada en la tabla. Si no hay ninguna seleccionada, devuelve -1.

if (filaSeleccionada >= 0) { 
    // Verifica si hay una fila seleccionada.
    try {
        String nombreProducto = tablaProductos.getValueAt(filaSeleccionada, 1).toString(); 
        // Obtiene el nombre del producto de la columna 1 de la fila seleccionada.
        String precioStr = JOptionPane.showInputDialog(null, "Ingrese el nuevo precio para " + nombreProducto + ":"); 
        // Muestra un cuadro de diálogo para ingresar el nuevo precio del producto.

        if (precioStr == null || precioStr.trim().isEmpty()) { 
            // Verifica si no se ingresó ningún valor para el precio.
            JOptionPane.showMessageDialog(null, "Debe ingresar un precio."); 
            // Muestra un mensaje indicando que el precio no puede estar vacío.
            return; 
            // Sale del método si no se ingresó un precio.
        }

        double nuevoPrecio = Double.parseDouble(precioStr.trim()); 
        // Convierte el valor ingresado a un número decimal (double).
        if (nuevoPrecio <= 0) { 
            // Verifica si el precio es menor o igual a 0.
            JOptionPane.showMessageDialog(null, "El precio debe ser mayor a 0."); 
            // Muestra un mensaje indicando que el precio debe ser positivo.
            return; 
            // Sale del método si el precio no es válido.
        }

        Object valorId = tablaProductos.getValueAt(filaSeleccionada, 0); 
        // Obtiene el ID del producto de la columna 0 de la fila seleccionada.
        if (valorId == null || valorId.toString().trim().isEmpty()) { 
            // Verifica si el ID del producto está vacío.
            JOptionPane.showMessageDialog(null, "El ID del producto no puede estar vacío."); 
            // Muestra un mensaje indicando que el ID es obligatorio.
            return; 
            // Sale del método si el ID no es válido.
        }

        int idProducto = Integer.parseInt(valorId.toString()); 
        // Convierte el ID del producto a un número entero (int).

        // LÍNEAS DE DEPURACIÓN
        System.out.println("ID Producto: " + idProducto); 
        System.out.println("Nombre Producto: " + nombreProducto); 
        System.out.println("Nuevo Precio: " + nuevoPrecio); 
        // Imprime en consola el ID, nombre y nuevo precio del producto para depuración.

        Producto producto = new Producto(idProducto, nombreProducto, nuevoPrecio); 
        // Crea un objeto 'Producto' con la información actualizada.
        ProductoDAO dao = new ProductoDAO(); 
        // Crea una instancia de 'ProductoDAO' para interactuar con la base de datos.

        if (dao.actualizarProducto(producto)) { 
            // Llama al método 'actualizarProducto' para guardar los cambios en la base de datos.
            JOptionPane.showMessageDialog(null, "Precio actualizado con éxito."); 
            // Si la actualización fue exitosa, muestra un mensaje de confirmación.
            cargarProductos(); 
            // Recarga la tabla de productos para reflejar los cambios.
        } else {
            JOptionPane.showMessageDialog(null, "Error al actualizar el precio. Verifique los datos."); 
            // Si hubo un error, muestra un mensaje indicando que algo salió mal.
        }
    } catch (NumberFormatException e) { 
        // Captura un error si el precio ingresado no es un número válido.
        JOptionPane.showMessageDialog(null, "El precio debe ser un número válido."); 
    } catch (Exception e) { 
        // Captura cualquier otro error inesperado.
        JOptionPane.showMessageDialog(null, "Ocurrió un error inesperado: " + e.getMessage()); 
    }
} else {
    // Si no se seleccionó una fila, muestra un mensaje indicando que se debe seleccionar un producto.
    JOptionPane.showMessageDialog(null, "Seleccione un producto para actualizar.");
}


    // TODO add your handling code here:
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
    // Verificar si hay una fila seleccionada
    int filaSeleccionada = tablaProductos.getSelectedRow();
    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(null, "Seleccione un producto para eliminar.");
        return;
    }

    // Confirmar eliminación
    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea eliminar este producto?",
            "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            // Obtener el ID del producto de la fila seleccionada
            Object valorId = tablaProductos.getValueAt(filaSeleccionada, 0);
            if (valorId == null) {
                JOptionPane.showMessageDialog(null, "No se pudo obtener el ID del producto.");
                return;
            }
            int idProducto = Integer.parseInt(valorId.toString());

            // Llamar al DAO para eliminar el producto
            ProductoDAO dao = new ProductoDAO();
            if (dao.eliminarProducto(idProducto)) { // Método en ProductoDAO
                JOptionPane.showMessageDialog(null, "Producto eliminado con éxito.");
                cargarProductos(); // Refrescar la tabla
            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar el producto. Verifique los datos.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error inesperado: " + e.getMessage());
        }
    }

    // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
     
    // Cerrar la ventana actual
    this.dispose();



 // TODO add your handling code here:
    }//GEN-LAST:event_btnAtrasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProductos;
    // End of variables declaration//GEN-END:variables

}